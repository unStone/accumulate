import { Note } from '../types/note';

// 笔记模板
export const NOTE_TEMPLATES = {
  daily: `# {{date}} 日记

## 今日目标
- [ ]
- [ ]
- [ ]

## 重要事件
-

## 学到的东西
-

## 明日计划
-

## 反思
-
`,

  zettelkasten: `# {{title}}

## 核心概念
<!-- 用一句话描述这个概念 -->

## 详细说明
<!-- 详细解释这个概念 -->

## 相关链接
- [[]]
- [[]]

## 标签
#

## 参考资料
-

---
创建时间: {{date}}
最后修改: {{date}}
`,

  project: `# 项目: {{title}}

## 项目概述
**目标**:
**截止日期**:
**状态**: 进行中

## 项目里程碑
- [ ] 里程碑1 - 日期
- [ ] 里程碑2 - 日期
- [ ] 里程碑3 - 日期

## 任务清单
### 待办
- [ ] 任务1
- [ ] 任务2

### 进行中
- [ ] 任务3

### 已完成
- [x] 已完成的任务

## 项目资源
- 文档:
- 工具:
- 团队成员:

## 项目笔记
<!-- 记录项目过程中的想法和发现 -->

## 项目回顾
<!-- 项目完成后的总结和反思 -->
`,

  meeting: `# 会议记录: {{title}}

**日期**: {{date}}
**时间**:
**参与者**:
**会议类型**:

## 会议议程
1.
2.
3.

## 讨论内容
### 议题一
- 讨论要点:
- 决定:
- 行动项:

### 议题二
- 讨论要点:
- 决定:
- 行动项:

## 行动项总结
- [ ] 行动项1 - 负责人 - 截止日期
- [ ] 行动项2 - 负责人 - 截止日期

## 下次会议
**时间**:
**议题**:
`,

  resource: `# 资源: {{title}}

## 资源信息
**类型**:
**来源**:
**获取日期**: {{date}}
**重要程度**: ⭐⭐⭐⭐⭐

## 资源描述
<!-- 简要描述这个资源的内容和价值 -->

## 核心要点
- 要点1
- 要点2
- 要点3

## 使用场景
<!-- 什么时候会用到这个资源 -->

## 相关资源
- [[相关资源1]]
- [[相关资源2]]

## 标签
#资源 #

## 备注
<!-- 其他需要记录的信息 -->
`
};

// 使用说明文档
export const USAGE_GUIDE = `# ObsidianVault 使用说明

## 📁 文件夹说明

### 00-Inbox (收件箱)
- **用途**: 临时存放新的想法、待整理的内容
- **使用方法**:
  - 随时记录突然想到的想法
  - 定期整理，将内容移动到合适的文件夹
- **建议**: 每周清理一次，避免堆积

### 01-Daily (每日笔记)
- **用途**: 记录日常想法、会议记录、工作日志
- **使用方法**:
  - 每天创建一个日记文件
  - 记录当天的工作、学习、生活
- **模板**: 包含目标、事件、学习、计划、反思等部分

### 02-Zettelkasten (卡片盒笔记)
- **用途**: 知识原子化，构建知识网络
- **使用方法**:
  - 每个笔记只包含一个核心概念
  - 通过链接建立概念之间的联系
  - 使用唯一的标识符
- **核心原则**: 原子性、链接性、持续性

### 03-Projects (项目)
- **用途**: 具有截止日期和明确目标的工作
- **使用方法**:
  - 为每个项目创建一个笔记
  - 跟踪项目进度和里程碑
  - 记录项目相关的所有信息
- **特点**: 有开始和结束时间

### 04-Topics (主题)
- **用途**: 持续关注和学习的主题
- **使用方法**:
  - 按主题组织相关知识
  - 长期积累和更新
  - 建立主题内的知识体系
- **例子**: 编程语言、设计原则、行业趋势

### 05-Areas (生活领域)
- **用途**: 需要持续维护的生活标准
- **使用方法**:
  - 定义各个生活领域的标准
  - 定期回顾和调整
  - 记录相关的想法和改进
- **例子**: 健康、财务、人际关系、职业发展

### 06-Resources (资源)
- **用途**: 参考资料、工具、链接等
- **使用方法**:
  - 收集有价值的资源
  - 添加描述和使用场景
  - 定期更新和清理
- **包含**: 书籍、文章、工具、网站、模板

### 07-Archives (归档)
- **用途**: 已完成或不再活跃的内容
- **使用方法**:
  - 将完成的项目移动到这里
  - 保留历史记录
  - 需要时可以查阅
- **原则**: 定期归档，保持其他文件夹整洁

### 99-Templates (模板)
- **用途**: 用于快速创建标准化笔记的模板
- **使用方法**:
  - 为不同类型的笔记创建模板
  - 使用模板快速创建新笔记
  - 定期更新和优化模板

## 🔗 链接语法
- 内部链接: \`[[笔记标题]]\`
- 带显示文本的链接: \`[[笔记标题|显示文本]]\`
- 标签: \`#标签名\`

## 📋 任务语法
- 待办事项: \`- [ ] 任务内容\`
- 已完成: \`- [x] 任务内容\`

## 🏷️ 标签系统
建议使用分层标签:
- \`#项目/工作\`
- \`#学习/编程\`
- \`#生活/健康\`

## 💡 使用建议

### 1. 建立习惯
- 每天开始工作前查看日记和任务
- 每周回顾和整理笔记
- 每月清理和归档

### 2. 保持简单
- 不要过度分类
- 专注于内容而非格式
- 定期删除不需要的笔记

### 3. 建立连接
- 多使用内部链接
- 通过标签组织内容
- 定期回顾旧笔记

### 4. 持续改进
- 定期评估系统效果
- 根据使用情况调整结构
- 不断优化工作流程

---

记住: 最好的笔记系统是你会持续使用的系统。根据自己的需求调整这个框架，让它为你服务。
`;

// 初始示例数据
export const INITIAL_NOTES: Note[] = [
  {
    id: 'usage-guide',
    title: 'ObsidianVault使用说明',
    content: USAGE_GUIDE,
    folder: 'inbox',
    tags: ['使用说明', '指南'],
    createdAt: new Date(),
    updatedAt: new Date(),
    filePath: '00-Inbox/ObsidianVault使用说明.md'
  },
  {
    id: 'welcome-note',
    title: '欢迎使用知识管理系统',
    content: `# 欢迎使用知识管理系统 🎉

恭喜你开始使用这个基于 PARA 方法和 Zettelkasten 理念的知识管理系统！

## 快速开始

1. **了解系统**: 阅读 [[ObsidianVault使用说明]] 了解各个文件夹的用途
2. **创建第一个笔记**: 点击左侧文件夹，然后点击"+ 新笔记"
3. **使用模板**: 在 99-Templates 文件夹中查看可用的模板
4. **建立连接**: 使用 [[链接语法]] 连接相关笔记
5. **添加标签**: 使用 #标签 来组织和查找笔记

## 系统特色

- ✅ 9个预设文件夹，覆盖知识管理的各个方面
- ✅ 多种笔记模板，快速创建标准化内容
- ✅ 实时搜索功能，快速找到所需信息
- ✅ 标签系统，灵活组织和分类
- ✅ 简洁直观的界面，专注于内容创作

## 下一步

- 在 01-Daily 中创建今天的日记
- 在 03-Projects 中添加你正在进行的项目
- 在 04-Topics 中记录你感兴趣的主题
- 在 06-Resources 中收集有价值的资源

祝你在知识管理的旅程中收获满满！ 🚀

---
#欢迎 #开始`,
    folder: 'inbox',
    tags: ['欢迎', '开始'],
    createdAt: new Date(),
    updatedAt: new Date(),
    filePath: '00-Inbox/欢迎使用知识管理系统.md'
  }
];

// 模板占位符替换函数
export const processTemplate = (template: string, data: Record<string, string> = {}): string => {
  const now = new Date();
  const defaultData = {
    date: now.toISOString().split('T')[0],
    time: now.toTimeString().split(' ')[0],
    title: '新笔记'
  };

  const mergedData = { ...defaultData, ...data };

  return template.replace(/\{\{(\w+)\}\}/g, (match, key) => {
    return mergedData[key] || match;
  });
};
